{"ast":null,"code":"import Big from\"big.js\";import operate from\"./operate\";import isNumber from\"./isNumber\";/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   previous:String      the running previous\n *   current:String       the current number to be operated on with the previous\n *   operation:String  +, -, etc.\n */export default function calculate(obj,buttonName){if(buttonName===\"AC\"){return{previous:null,current:null,operation:null};}if(isNumber(buttonName)){if(buttonName===\"0\"&&obj.current===\"0\"){return{};}// If there is an operation, update current\nif(obj.operation){if(obj.current){return{current:obj.current+buttonName};}return{current:buttonName};}// If there is no operation, update current and clear the value\nif(obj.current){var current=obj.current===\"0\"?buttonName:obj.current+buttonName;return{current:current,previous:null};}return{current:buttonName,previous:null};}if(buttonName===\"%\"){if(obj.operation&&obj.current){var result=operate(obj.previous,obj.current,obj.operation);return{previous:Big(result).div(Big(\"100\")).toString(),current:null,operation:null};}if(obj.current){return{current:Big(obj.current).div(Big(\"100\")).toString()};}return{};}if(buttonName===\".\"){if(obj.current){// ignore a . if the current number already has one\nif(obj.current.includes(\".\")){return{};}return{current:obj.current+\".\"};}return{current:\"0.\"};}if(buttonName===\"=\"){if(obj.current&&obj.operation){return{previous:operate(obj.previous,obj.current,obj.operation),current:null,operation:null};}else{// '=' with no operation, nothing to do\nreturn{};}}if(buttonName===\"+/-\"){if(obj.current){return{current:(-1*parseFloat(obj.current)).toString()};}if(obj.previous){return{previous:(-1*parseFloat(obj.previous)).toString()};}return{};}// Button must be an operation\n// When the user presses an operation button without having entered\n// a number first, do nothing.\n// if (!obj.current && !obj.previous) {\n//   return {};\n// }\n// User pressed an operation button and there is an existing operation\nif(obj.operation){return{previous:operate(obj.previous,obj.current,obj.operation),current:null,operation:buttonName};}// no operation yet, but the user typed one\n// The user hasn't typed a number yet, just save the operation\nif(!obj.current){return{operation:buttonName};}// save the operation and shift 'current' into 'previous'\nreturn{previous:obj.current,current:null,operation:buttonName};}","map":{"version":3,"names":["Big","operate","isNumber","calculate","obj","buttonName","previous","current","operation","result","div","toString","includes","parseFloat"],"sources":["/Users/nhupham/Desktop/schoolSpr24/cs3398/midterm/reactcalculator_firebase_midterm/src/logic/calculate.js"],"sourcesContent":["import Big from \"big.js\";\n\nimport operate from \"./operate\";\nimport isNumber from \"./isNumber\";\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   previous:String      the running previous\n *   current:String       the current number to be operated on with the previous\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === \"AC\") {\n    return {\n      previous: null,\n      current: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === \"0\" && obj.current === \"0\") {\n      return {};\n    }\n    // If there is an operation, update current\n    if (obj.operation) {\n      if (obj.current) {\n        return { current: obj.current + buttonName };\n      }\n      return { current: buttonName };\n    }\n    // If there is no operation, update current and clear the value\n    if (obj.current) {\n      const current = obj.current === \"0\" ? buttonName : obj.current + buttonName;\n      return {\n        current,\n        previous: null,\n      };\n    }\n    return {\n      current: buttonName,\n      previous: null,\n    };\n  }\n\n  if (buttonName === \"%\") {\n    if (obj.operation && obj.current) {\n      const result = operate(obj.previous, obj.current, obj.operation);\n      return {\n        previous: Big(result)\n          .div(Big(\"100\"))\n          .toString(),\n        current: null,\n        operation: null,\n      };\n    }\n    if (obj.current) {\n      return {\n        current: Big(obj.current)\n          .div(Big(\"100\"))\n          .toString(),\n      };\n    }\n    return {};\n  }\n\n  if (buttonName === \".\") {\n    if (obj.current) {\n      // ignore a . if the current number already has one\n      if (obj.current.includes(\".\")) {\n        return {};\n      }\n      return { current: obj.current + \".\" };\n    }\n    return { current: \"0.\" };\n  }\n\n  if (buttonName === \"=\") {\n    if (obj.current && obj.operation) {\n      return {\n        previous: operate(obj.previous, obj.current, obj.operation),\n        current: null,\n        operation: null,\n      };\n    } else {\n      // '=' with no operation, nothing to do\n      return {};\n    }\n  }\n\n  if (buttonName === \"+/-\") {\n    if (obj.current) {\n      return { current: (-1 * parseFloat(obj.current)).toString() };\n    }\n    if (obj.previous) {\n      return { previous: (-1 * parseFloat(obj.previous)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.current && !obj.previous) {\n  //   return {};\n  // }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    return {\n      previous: operate(obj.previous, obj.current, obj.operation),\n      current: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.current) {\n    return { operation: buttonName };\n  }\n\n  // save the operation and shift 'current' into 'previous'\n  return {\n    previous: obj.current,\n    current: null,\n    operation: buttonName,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}